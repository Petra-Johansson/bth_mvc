{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Redovisningstexter</h1>
    <div class="two-grid">
      <section>
      <ul class="link-list">
      <li><a href="#01"> Kmom01 </a> </li>
      <li><a href="#02"> Kmom02 </a></li>
      <li><a href="#03"> Kmom03 </a></li>
      </ul>

      </section>
   
   <div>   
    <section id="01">
    <h2>Kmom01</h2>
    <p>Jag har i princip ingen erfarenhet sedan tidigare om objektorientering, 
    vilket gör detta extra spännande. Det närmsta jag kommit är då jag arbetat med 
    JavaScript och då främst i Nest.js vilket till stor del bygger på att man skriver just objektorienterat (och modulärt).</p>
    
    <p>
Om jag förstått rätt så kan man se klasser som en mall för hur något ska se ut/bestå av och vad det kan göra; 
och ett objekt är en instans av klassen. Dvs objektet “är” då klassen faktiskt används och något skapas 
utifrån den. Klasser är smidiga att skapa och återanvända till saker som behöver samma struktur,
egenskaper och även beteenden.
    </p>

    <p>

Jag vet inte riktigt hur jag “uppfattar” den kodbas, struktur och kod som användes nu i början - 
allt känns nytt så det är svårt att greppa jsut nu. Det är enormt mycket filer som jag inte alls förstår 
vad de gör, typ “importmap.php”, “phpunit.xml.dist”, “kernel.php” vilket gör det svårt att navigera runt. 
Men förhoppningsvis kommer allt klarna under kommande moment. Men det jag själv skapat känns än så länge rätt logiskt, som att detta:
  <br>
  <code>
  #[Route("/", name: "home")]
   public function home(): Response
   {
       return $this->render('home.html.twig');
   }
</code>
<br>
skapar en route med just namnet “home” och även renderar twig-templatet med namnet home. 
    </p>

    <p>
    Jag skall vara ärlig och säga att jag hittills bara ögnat igenom artikeln(?)/sidan https://phptherightway.com/ , 
    jag blev extremt överväldig av all info som stod men jag är säker på att sidan kommer komma till enormt stor användning under 
    kursen och även senare. Den verkar bestå av det mesta man kan tänkas behöva veta om just PHP och det känns tryggt 
    att den verkar uppdateras frekvent så man kan vara säker på att informationen  inte är utdaterad! 
    I nuläget måste jag nog välja området “The basics” som extra värdefullt - då det är där jag känner att jag måste börja och verkligen förstå 
    för att sedan kunna ta mig vidare till mer avancerade platser :) 
    </p>
    <h3>TIL</h3>
    <p>
    Mitt TIL får nog vara dels något så banalt som att det tydligen finns ett ramverk som heter Symfony. 
    Men också att mycket av det som skulle göras nu, och säkerligen i kommande moment, ju faktiskt är sånt som vi gått igenom tidigare
     - så jag hoppas att jag kan gräva fram lite information från bakhuvudet!
    </p>
    </section>
<hr>
    <section id="02">
    <h2>Kmom02</h2>
    <ul>
   <li><strong> Arv - vad något är:</strong> Innebär att en klass ärver, extends, kod från en annan (föräldrar)klass. Till exempel kan vi ha klasserna Fordon och Personbil. Personbil ärver egenskaper och metoder, som att den till exempel har ett märke, en färg, och kan starta och stanna från föräldrarklassen Fordon; men den kan även få nya egenskaper som till exempel funktionen att fälla ner baksätet - något ett annat fordon som till exempel en moped inte behöver. Lite som ett släktträd/släktskap där vi ärver mycket från våra föräldrar, men även skaffar oss en egen personlighet.
</li>
<li><strong>Komposition - vad något har:</strong> Här kan vi tänka lite som ett lapptäcke eller legobygge; klassen innehåller andra objekt utan att ärva dem och kan enklare bytas ut. Som i exemplet ovan med personbilen - en komposition kan vara att motorn kan vara en diesel- eller elmotor, lamporna på bilen kan ha ett gult eller vittljus.
</li>
<li><strong>Interface - vad något kan:</strong> Agerar lite som ett kontrakt, eller en checklista, där de metoder som skall användas definieras med “metodsignaturer”. För att fortsätta med våra fordon: oavsett om det är en moped, personbil eller buss bör den rimligtvis kunna köra framåt och även backa. Dessa två metoder skulle då kunna definieras/deklareras i ett interface med namn, parametrar och även returtyp.
En klass implementerar sedan detta interface och de angivna metoderna måste skrivas i koden för klassen Personbil. Missar vi att faktiskt skriva metoden för “backa” i Personbils-klassen kommer vi få error då vi försöker köra koden. 
</li>
<li><strong>Trait:</strong>Då en klass använder ett trait innebär det att man i princip “kopierar” in ett stycke kod i en klass och kan vara som ett komplement till ett arv.. Syftet med ett trait är att det är en återanvändningsbar modul som flera klasser kan ha nytta av - kanske i form av att logga händelser eller om man spelar minigolf, håller koll på hur många slag personen behöver för att klara respektive bana.</p>
</li>
</ul>
<p>
Jag tycker uppgiften var klurig att lösa, speciellt att hålla sessionen och testa att den fungerade korrekt - då främst när det kom till att arbeta i terminalen med JSON-apiet (jag kan ha missat någon föreläsning där det gicks igenom hur vi skulle testa att allt fungerar..). Det tog ett tag innan jag förstod hur jag genom curl skulle lyckas testa och hålla sessions-cookien levande - innan dess stämde liksom inget riktigt med dragna kort, shuffling och så vidare.
  </p>
  
  <p>
  Jag skulle tro att det finns mycket förfining att göra. Jag valde att ha de tre föreslagna klasserna: Card, CardHand och DeckOfCards. 
Card består av metoder för att getSuit, getValue och även getGraphics där varje suit-value:par har sitt motsvarande utf-8-kort. Jag hade gärna lagt tid på att göra egna kort men det kändes för tidskrävande nu då jag redan ligger så långt efter i planeringen. CardHand har metoderna addCard (till en cards-array) och getCards.
DeckOfCards-klassen har metoder för att skapa en kortlek (genereteDeck), shuffla leken, dra ett eller flera kort samt för att visa vilka kort som dragits (getCards).
  </p>
  <p>
  Jag tycker det känns “konstigt” att mina controllers - den för Symfony och den för JSON-apiet är så lika. Det känns som att jag kanske missförstått något självklart. Nu känns det som att jag nästan kopierat stora delar från “CardGameController” till “CardGameControllerJson” - men att den stora skillnaden är att den senare returnerar i json-format.
  </p>
  <p>
  Jag tycker det känns ganska trevligt att arbeta med Symfony faktiskt! Det är trevligt att ha alla delar för MVC direkt och inte behöva tänka på att arbeta dels i en backend men även en frontend som i till exempel Nest.js + valfri template-engine. Just Twig tycker jag ser ganska fult och rörigt ut att skriva, speciellt utan någon typ av VS code-extension som formaterar koden.I detta projekt märks det kanske främst på denna sida då jag först skriver all text i ett textdokument och sedan klistrar in och ingen formatering följer med. Det är också skönt att inte behöva reflektera över async/await då allt sker sekventiellt och även att ha mycket serverside - det går fort att starta upp både projektet men även att hoppa mellan sidor och interagera med dem!
  </p>
  
  <h3>TIL</h3>
<p>
Jag skulle säga att allt som har med klasser att göra faller inom denna rubrik. Jag har inte haft någon direkt koll på vare sig arv, komposition, interface eller trait - jag har vetat att de existerar och används, men inte förstått innebörden av dem! Jag har tidigare inte heller gjort UML-diagram så även det var nytt och känns liksom er-diagram något förvirrande i hur de olika relationerna definieras med var diamanter/pilar placeras osv.
</p>
    </section>

    <section id="03">
    <h2>Kmom03</h2>
    <p></p>
        <h3>TIL</h3>

    </section> 
</div>
{% endblock %}
